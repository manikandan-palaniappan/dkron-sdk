/*
 * DkronRESTAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.api.dkron.models;

import java.util.*;

public class JobBuilder {
    //the instance to build
    private Job job;

    /**
     * Default constructor to initialize the instance
     */
    public JobBuilder() {
        job = new Job();
    }

    /**
     * Command to run.
     */
    public JobBuilder command(String command) {
        job.setCommand(command);
        return this;
    }

    /**
     * Name for the job.
     */
    public JobBuilder name(String name) {
        job.setName(name);
        return this;
    }

    /**
     * Cron expression for the job.
     */
    public JobBuilder schedule(String schedule) {
        job.setSchedule(schedule);
        return this;
    }

    /**
     * Array containing the jobs that depends on this one
     */
    public JobBuilder dependentJobs(String dependentJobs) {
        job.setDependentJobs(dependentJobs);
        return this;
    }

    /**
     * Disabled state of the job
     */
    public JobBuilder disabled(Boolean disabled) {
        job.setDisabled(disabled);
        return this;
    }

    /**
     * Number of failed executions
     */
    public JobBuilder errorCount(Integer errorCount) {
        job.setErrorCount(errorCount);
        return this;
    }

    /**
     * Last time this job failed
     */
    public JobBuilder lastError(Date lastError) {
        job.setLastError(lastError);
        return this;
    }

    /**
     * Last time this job executed successfully
     */
    public JobBuilder lastSuccess(Date lastSuccess) {
        job.setLastSuccess(lastSuccess);
        return this;
    }

    /**
     * Owner of the job
     */
    public JobBuilder owner(String owner) {
        job.setOwner(owner);
        return this;
    }

    /**
     * Email of the owner
     */
    public JobBuilder ownerEmail(String ownerEmail) {
        job.setOwnerEmail(ownerEmail);
        return this;
    }

    /**
     * The name/id of the job that will trigger the execution of this job
     */
    public JobBuilder parentJob(String parentJob) {
        job.setParentJob(parentJob);
        return this;
    }

    /**
     * Number of times to retry a failed job execution
     */
    public JobBuilder retries(Integer retries) {
        job.setRetries(retries);
        return this;
    }

    /**
     * Use shell to run the command
     */
    public JobBuilder shell(Boolean shell) {
        job.setShell(shell);
        return this;
    }

    /**
     * Number of successful executions
     */
    public JobBuilder successCount(Integer successCount) {
        job.setSuccessCount(successCount);
        return this;
    }

    /**
     * Tags asociated with this node
     */
    public JobBuilder tags(Object tags) {
        job.setTags(tags);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public Job build() {
        return job;
    }
}